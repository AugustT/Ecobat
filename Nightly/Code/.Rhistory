# Select  sunrise date and time
risedata <- risedata %>%
select(date, sunrise) %>%
mutate(date = lubridate::as_date(date)) %>%
mutate(date = date - lubridate::days(1))
glimpse(risedata)
# Combine sunset and risedata by
sun_data <- dplyr::full_join(setdata, risedata, by="date")
glimpse(sun_data)
# Rename date as Night
colnames(sun_data) <- c("Night", "sunset", "sunrise")
# Join bat data with the sundata by Night
joined_data <- dplyr::left_join(B_data2, sun_data, by="Night")
# To make sure difference is in minutes/hours etc... use difftime
All_data <- joined_data %>%
mutate(post_set_min = as.numeric(difftime(DateTime, sunset, units='mins')),
pre_rise_min = as.numeric(difftime(sunrise, DateTime, units='mins')),
post_set_hr = as.numeric(difftime(DateTime, sunset, units='hours')),
pre_rise_hr = as.numeric(difftime(sunrise, DateTime, units='hours')),
post_set_hr_int = as.integer(round(post_set_hr, digits = 0)),
pre_rise_hr_int = as.integer(round(pre_rise_hr, digits = 0)),
night_length_hr = as.numeric(difftime(sunrise, sunset, units='hours')))
# Look at data
glimpse(All_data)
#Russ(2012) Bat roost emergence times minutes after sunset
Scientific <- c("Barbastella barbastellus",
"Eptesicus serotinus",
"Myotis alcathoe",
"Myotis bechsteinii",
"Myotis brandtii",
"Myotis daubentonii",
"Myotis mystacinus",
"Myotis nattereri",
"Myotis spp.",
"Nyctalus leisleri",
"Nyctalus noctula",
"Nyctalus spp.",
"Pipistrellus nathusii",
"Pipistrellus pipistrellus",
"Pipistrellus pygmaeus",
"Pipistrellus spp.",
"Plecotus auritus",
"Plecotus austriacus",
"Rhinolophus ferrumequinum",
"Rhinolophus hipposideros")
lower <- c(25, 20, 30, 30, 30, 50, 30, 35, 30, 8, 5, 5, 18, 22, 22, 18, 40, 40, 35, 35)
upper <- c(60, 25, 35, 33, 35, 70, 35, 55, 70, 18, 9, 18, 28, 32, 28, 32, 60, 60, 48, 50)
russ <- tibble(Scientific, lower, upper)
#Join with Jon Russ data with bat observation data All_data
All_data <- dplyr::left_join(All_data, russ, by = "Scientific")
# Look at data
glimpse(All_data)
Table <- All_data %>%
select(Night, sunset, sunrise) %>%
distinct() %>%
mutate(night_length = round(as.numeric(difftime(sunrise, sunset, units='hours')), digits = 1),
sunset = stringr::str_sub(as.character(sunset), 11, 16),
sunrise = stringr::str_sub(as.character(sunrise), 11, 16))
colnames(Table) <- c("Night", "Sunset (hh:mm)", "Sunrise (hh:mm)", "Night Length (hours)")
knitr::kable(Table, align = ("lrrr"))
# Aggregate data into Species and count
Table <- All_data %>%
group_by(Scientific) %>%
count() %>%
arrange(desc(n))
View(All_data)
Table <- All_data %>%
group_by(Scientific) %>%
count()
Table
glimpse(Table)
Table <- All_data %>%
group_by(Scientific) %>%
count(Scientific)
Table <- All_data %>%
count(Scientific)
View(All_data)
Table <- All_data %>%
group_by(Scientific) %>%
summarise(number = n())
Table <- All_data %>%
group_by(Scientific) %>%
count(Scientific) %>%
arrange(desc(n))
Table <- All_data %>%
group_by(Scientific) %>%
count()
glimpse(All_data)
View(All_data)
Table <- All_data %>%
group_by(Scientific) %>%
count()
glimpse(Table)
View(Table)
Table <- All_data %>%
group_by(Scientific) %>%
mutate(count = n())
detach("package:plyr", unload=TRUE)
library(dplyr)
Table <- All_data %>%
group_by(Scientific) %>%
mutate(count = n())
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(dplyr)
library(suncalc) # Suntimes
library(knitr)
library(lubridate)
glimpse(Table)
Table <- All_data %>%
group_by(Scientific) %>%
count() %>%
arrange(desc(n))
View(Table)
Table <- All_data %>%
group_by(Scientific) %>%
count() %>%
arrange(desc(n))
glimpse(All_data)
# Aggregate data into Species and count
Table <- All_data %>%
group_by(Scientific) %>%
count() %>%
arrange(desc(n))
#Change column Names so more meaningful
colnames(Table) <- c("Scientific Name", "Count (No)")
# kable is a simple table generator
knitr::kable(Table)
Table <- All_data %>%
group_by(Scientific, Night) %>%
count() %>%
spread(Night, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
Table <- All_data %>%
group_by(Scientific, Night, night_length_hr) %>%
# count number of passes per night by species - makes coloumn "n""
count() %>%
# calculate average bat passes per hour for each Night and species
summarise(Act_per_hr = n / night_length_hr) %>%
# Remove Night Length column from the Table
select(-night_length_hr) %>%
spread(Night, Act_per_hr)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table with 1 decimal point
knitr::kable(Table, digits = 1)
Table <- All_data %>%
group_by(Scientific, Month) %>%
count() %>%
spread(Month, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
Table <- All_data %>%
group_by(Night, Scientific) %>%
summarise(total_act = sum(bat_time)) %>%
spread(Night, total_act)
Table <- All_data %>%
group_by(Night, Scientific) %>%
summarise(total_act = sum(Bat_time)) %>%
spread(Night, total_act)
# Make all NA's = ""
Table[is.na(Table)] <- 0
# simple table with 1 decimal point
knitr::kable(Table, digits = 1)
Table <- All_data %>%
group_by(Night, Scientific) %>%
summarise(total_act = sum(bat_time)) %>%
ungroup(Night, Scientific) %>%
mutate(total_act = round(total_act, digits = 0),
total_act = as.character(lubridate::seconds_to_period(total_act))) %>%
spread(Night, total_act)
Table <- All_data %>%
group_by(Night, Scientific) %>%
summarise(total_act = sum(Bat_time)) %>%
ungroup(Night, Scientific) %>%
mutate(total_act = round(total_act, digits = 0),
total_act = as.character(lubridate::seconds_to_period(total_act))) %>%
spread(Night, total_act)
# Make all NA's = ""
Table[is.na(Table)] <- ""
# simple table
knitr::kable(Table)
Table <- All_data %>%
group_by(Scientific, post_set_hr_int) %>%
count() %>%
spread(post_set_hr_int, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
Table <- All_data %>%
filter(post_set_min <= upper) %>%
group_by(Night, Scientific) %>%
count() %>%
spread(Night, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
shinyServer(function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects and uploads a
# file, it will be a data frame with 'name', 'size', 'type', and 'datapath'
# columns. The 'datapath' column will contain the local filenames where the
# data can be found.
data1 <- input$file #grabs uploaded file
if (is.null(data1)) #if no data has been uploaded, main panel is empty
return(NULL)
data2<-read.csv(data1$datapath, header=TRUE)
data2 #if data has been uploaded, it reads it and then displays in the main panel
})
# this reactive output tells Shiny that once data has been uploaded it should display a download button for the
# Rmd report. If no data has been uploaded then the button will not appear.
output$ui.download <- renderUI({
if (is.null(input$file)) return() #if no data uploaded button is not present
downloadButton("report", "Generate report")}) #if data uploaded button appears
output$ui.download.helper <- renderUI({
if (is.null(input$file)) return() #if no data uploaded, helper text associated w/ download button not present
h5(helpText("Report may take a few minutes to generate; please be patient."))})
#if data uploaded, helper text associated with the download button appears
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf" #pdf output requires LaTex
filename = "Ecobat Report.doc", #we want word document output
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "EcobatScript.Rmd") #change this to EcobatScript.Rmd when app
#is deployed
file.copy("EcobatScript.Rmd", tempReport, overwrite = TRUE) #also change this
#**CRUCIAL CODE this code is responsible for passing the data to Rmd.
dataa<-input$file #tells R Markdown where it can find data
datab<-read.csv(dataa$datapath, header=TRUE) #tells Rmd where to read the data from
author<-input$Author #tells Rmd what to use as Author
#**END CRUCIAL CODE
# Set up parameters to pass to Rmd document
params <- list(n = datab, Author=author)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv()))
})
})
library(shiny)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(suncalc) # Suntimes
library(knitr)
#print out code by default
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse) # Enables a consistent approach to data science
library(suncalc) # Suntimes
#Function BatExplorer_csv
BatExplorer_csv <- function(pathfile) {
df <- readr::read_csv(pathfile, col_names= T)
df <- df %>%
select(Recording,
Timestamp,
`Species Text`,
`Calls [#]`,
`Mean Call Lenght [ms]`,
`Mean Call Distance [ms]`,
`Latitude [WGS84]`,
`Longitude [WGS84]`
)
}
Data1 <- BatExplorer_csv("data//Tavy01.csv")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(dplyr)
library(suncalc) # Suntimes
library(knitr)
library(lubridate)
#Function BatExplorer_csv
BatExplorer_csv <- function(pathfile) {
df <- readr::read_csv(pathfile, col_names= T)
df <- df %>%
select(Recording,
Timestamp,
`Species Text`,
`Calls [#]`,
`Mean Call Lenght [ms]`,
`Mean Call Distance [ms]`,
`Latitude [WGS84]`,
`Longitude [WGS84]`
)
}
# for testing purposes - load in data from Steve
Data1 <- BatExplorer_csv("//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight/Data/Tavy01.csv")
Data2 <- BatExplorer_csv("//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight/Data/Tavy02.csv")
Data3 <- BatExplorer_csv("//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight/Data/Tavy03.csv")
B_data <- rbind(Data1, Data2, Data3)
#this is here for when the script is finalised and the Shiny app is deployed
#read data in from shiny
#df <- params$n
# Bat Time Metrics
glimpse(B_data) # look at the structure
# Standardize Variables - make names consistent for further manipulation; can do the same for other bat sound analysis software e.g. Kaleidoscope. Make time zone local e.g `"Europe/London"`; adjusts for daylight saving automatically.
B_data$Scientific <-  B_data$`Species Text`
#Make Time Zone Local
B_data$DateTime <- lubridate::dmy_hms(B_data$Timestamp, tz = "Europe/London")
B_data$Calls <- B_data$`Calls [#]`
B_data$Length <- B_data$`Mean Call Lenght [ms]`
B_data$Distance <- B_data$`Mean Call Distance [ms]`
B_data$Latitude <- B_data$`Latitude [WGS84]`
B_data$Longitude <- B_data$`Longitude [WGS84]`
# Change `spec.` to `spp.`
B_data$Scientific <- stringr::str_replace(B_data$Scientific, "spec.", "spp." )
# Create Useful Variables
# `Night` date at dusk
# `Month` month of observation `Jan, Feb, Mar....`
# `JustTime` time hh:mm of bat observation (12 hours added so plots correctly as `Night` i.e. dusk to dawn)
# `bat_time` time in seconds bat present see <https://rbats-blog.updog.co/2018/06/19/a-bat-time-metric/>
B_data2 <- B_data %>%
mutate(Night = DateTime - lubridate::hours(12)) %>% # DateTime minus 12 hours
mutate(Night = lubridate::as_date(Night)) %>%
mutate(Month = lubridate::month(Night, label = T)) %>% # Make Month of observation
mutate(JustTime = DateTime + lubridate::hours(12)) %>%
mutate(JustTime = hms::as.hms(stringr::str_sub(as.character(JustTime), start = 12, end = 19))) %>%
mutate(Bat_time = (Calls * (Length + Distance)) / 1000) %>%
#Remove NA observations
filter(!is.na(Scientific)) %>%
# Select just columns needed in nice order
select(Night, JustTime, DateTime, Scientific, Bat_time, Month, Latitude, Longitude)
#B_data2$Night <- as.Date(B_data2$Night)
#B_data2$JustTime <- format(strptime(B_data2$JustTime, "%Y-%m-%d %H:%M:%S"), "%H:%M:%S")
glimpse(B_data2)
# Create suntimes
# Use package `suncalcs` to make `sunset` and `sunrise` columns for each `Night` and the location (`Latitude` and `Longitude`) of the bat survey.
# Get number nights between first and last bat observation (plus 1 for dawn)
num_nights <- as.integer(difftime(max(B_data2$Night) ,
min(B_data2$Night) ,
units = c("days"))) + 1
# Make a date vector of nights between first and last bat observation.
nightlist <- seq.Date(from=min(B_data2$Night),
length.out = num_nights +1,
by='days')
# Get suntimes for date vector and Location (Latitude and Longitude)
setdata <- getSunlightTimes(date = nightlist,
lat = median(B_data2$Latitude, na.rm = T),
lon = median(B_data2$Longitude, na.rm = T),
tz = "Europe/London")
# Duplicate data.frame to make sunrise data
risedata <- setdata
# Select  sunset date and time
setdata <- setdata %>%
select(date, sunset) %>%
mutate(date = lubridate::as_date(date))
glimpse(setdata)
# Select  sunrise date and time
risedata <- risedata %>%
select(date, sunrise) %>%
mutate(date = lubridate::as_date(date)) %>%
mutate(date = date - lubridate::days(1))
glimpse(risedata)
# Combine sunset and risedata by
sun_data <- dplyr::full_join(setdata, risedata, by="date")
glimpse(sun_data)
# Rename date as Night
colnames(sun_data) <- c("Night", "sunset", "sunrise")
# Join bat data with the sundata by Night
joined_data <- dplyr::left_join(B_data2, sun_data, by="Night")
# To make sure difference is in minutes/hours etc... use difftime
All_data <- joined_data %>%
mutate(post_set_min = as.numeric(difftime(DateTime, sunset, units='mins')),
pre_rise_min = as.numeric(difftime(sunrise, DateTime, units='mins')),
post_set_hr = as.numeric(difftime(DateTime, sunset, units='hours')),
pre_rise_hr = as.numeric(difftime(sunrise, DateTime, units='hours')),
post_set_hr_int = as.integer(round(post_set_hr, digits = 0)),
pre_rise_hr_int = as.integer(round(pre_rise_hr, digits = 0)),
night_length_hr = as.numeric(difftime(sunrise, sunset, units='hours')))
# Look at data
glimpse(All_data)
#Russ(2012) Bat roost emergence times minutes after sunset
Scientific <- c("Barbastella barbastellus",
"Eptesicus serotinus",
"Myotis alcathoe",
"Myotis bechsteinii",
"Myotis brandtii",
"Myotis daubentonii",
"Myotis mystacinus",
"Myotis nattereri",
"Myotis spp.",
"Nyctalus leisleri",
"Nyctalus noctula",
"Nyctalus spp.",
"Pipistrellus nathusii",
"Pipistrellus pipistrellus",
"Pipistrellus pygmaeus",
"Pipistrellus spp.",
"Plecotus auritus",
"Plecotus austriacus",
"Rhinolophus ferrumequinum",
"Rhinolophus hipposideros")
lower <- c(25, 20, 30, 30, 30, 50, 30, 35, 30, 8, 5, 5, 18, 22, 22, 18, 40, 40, 35, 35)
upper <- c(60, 25, 35, 33, 35, 70, 35, 55, 70, 18, 9, 18, 28, 32, 28, 32, 60, 60, 48, 50)
russ <- tibble(Scientific, lower, upper)
#Join with Jon Russ data with bat observation data All_data
All_data <- dplyr::left_join(All_data, russ, by = "Scientific")
# Look at data
glimpse(All_data)
Table <- All_data %>%
select(Night, sunset, sunrise) %>%
distinct() %>%
mutate(night_length = round(as.numeric(difftime(sunrise, sunset, units='hours')), digits = 1),
sunset = stringr::str_sub(as.character(sunset), 11, 16),
sunrise = stringr::str_sub(as.character(sunrise), 11, 16))
colnames(Table) <- c("Night", "Sunset (hh:mm)", "Sunrise (hh:mm)", "Night Length (hours)")
knitr::kable(Table, align = ("lrrr"))
glimpse(All_data)
# Aggregate data into Species and count
Table <- All_data %>%
group_by(Scientific) %>%
count() %>%
arrange(desc(n))
#Change column Names so more meaningful
colnames(Table) <- c("Scientific Name", "Count (No)")
# kable is a simple table generator
knitr::kable(Table)
Table <- All_data %>%
group_by(Scientific, Night) %>%
count() %>%
spread(Night, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
Table <- All_data %>%
group_by(Scientific, Night, night_length_hr) %>%
# count number of passes per night by species - makes coloumn "n""
count() %>%
# calculate average bat passes per hour for each Night and species
summarise(Act_per_hr = n / night_length_hr) %>%
# Remove Night Length column from the Table
select(-night_length_hr) %>%
spread(Night, Act_per_hr)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table with 1 decimal point
knitr::kable(Table, digits = 1)
Table <- All_data %>%
group_by(Scientific, Month) %>%
count() %>%
spread(Month, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
Table <- All_data %>%
group_by(Night, Scientific) %>%
summarise(total_act = sum(Bat_time)) %>%
spread(Night, total_act)
# Make all NA's = ""
Table[is.na(Table)] <- 0
# simple table with 1 decimal point
knitr::kable(Table, digits = 1)
Table <- All_data %>%
group_by(Night, Scientific) %>%
summarise(total_act = sum(Bat_time)) %>%
ungroup(Night, Scientific) %>%
mutate(total_act = round(total_act, digits = 0),
total_act = as.character(lubridate::seconds_to_period(total_act))) %>%
spread(Night, total_act)
# Make all NA's = ""
Table[is.na(Table)] <- ""
# simple table
knitr::kable(Table)
Table <- All_data %>%
group_by(Scientific, post_set_hr_int) %>%
count() %>%
spread(post_set_hr_int, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
Table <- All_data %>%
filter(post_set_min <= upper) %>%
group_by(Night, Scientific) %>%
count() %>%
spread(Night, n)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
knitr::kable(Table)
library(pander)
#load packages - included all the ones required for the Rmd script to run too - not sure if necessary
library(shiny) # tell R which packages it's going to need to use ggplot2, knitr, pander and plyr are called in the rmd code
runExample("01_hello")
write.csv(B_data, "//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight/Data/data_test.csv")
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Shiny_Apps/App-2')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Shiny_Apps/App-2')
Table <- All_data %>%
group_by(Scientific, Night, night_length_hr) %>%
# count number of passes per night by species - makes coloumn "n""
count() %>%
# calculate average bat passes per hour for each Night and species
summarise(Act_per_hr = n / night_length_hr) %>%
# Remove Night Length column from the Table
select(-night_length_hr) %>%
spread(Night, Act_per_hr)
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Shiny_Apps/App-2')
